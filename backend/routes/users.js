const express = require('express');
const router = express.Router();
const pool = require('../config/database');
const userController = require('../controllers/userController');
const { authMiddleware, authorizeRole } = require('../middleware/authMiddleware');

const roleMap = {
    "–Ω–∞—á–∞–ª—å–Ω–∏–∫_–∫—É—Ä—Å—É": "nk",
    "–Ω–∞—á–∞–ª—å–Ω–∏–∫_—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É": "nf",
    "–∫–æ–º–∞–Ω–¥–∏—Ä_–≥—Ä—É–ø–∏": "kg",
    "–∫–æ–º–∞–Ω–¥–∏—Ä_–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è": "kv",
    "—á–µ—Ä–≥–æ–≤–∏–π_–ø–æ_—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É": "cf",
    "—á–µ—Ä–≥–æ–≤–∏–π_–ª–æ–∫–∞—Ü—ñ—ó": "cl"
};

// üÜï –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–∏ –∑–∞ groupId (–º–∞—î –±—É—Ç–∏ –≤–∏—â–µ –∑–∞ /:id)
router.get('/groups/:groupId/number', authMiddleware, userController.getGroupNumberById);

// üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è groupId –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–∏
router.get('/groups/number/:number', authMiddleware, async (req, res) => {
    const { number } = req.params;

    try {
        const result = await pool.query('SELECT id FROM groups WHERE group_number = $1', [number]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        res.json({ groupId: result.rows[0].id });
    } catch (err) {
        console.error('‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –ø–æ—à—É–∫—É groupId:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üîπ –í–°–Ü –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
router.get('/', authMiddleware, async (req, res) => {
    try {
        const result = await pool.query(
            'SELECT id, name, role, rank, is_active FROM users WHERE is_active = true ORDER BY id'
        );
        res.json(result.rows);
    } catch (err) {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –í–°–Ü –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (soft-deleted)
router.get('/inactive', authMiddleware, async (req, res) => {
    try {
        const result = await pool.query(
            'SELECT id, name, role, rank, is_active FROM users WHERE is_active = false ORDER BY id'
        );
        res.json(result.rows);
    } catch (err) {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–æ–ª–ª—é (–ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ)
router.get('/role/:role', authMiddleware, async (req, res) => {
    let { role } = req.params;
    role = decodeURIComponent(role);
    const dbRole = roleMap[role] || role;

    try {
        const result = await pool.query(
            'SELECT id, name, role, rank FROM users WHERE role = $1 AND is_active = true',
            [dbRole]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.json(result.rows);
    } catch (err) {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post('/create', authMiddleware, authorizeRole(['admin']), userController.createUser);

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.put('/:id', authMiddleware, authorizeRole(['admin']), (req, res, next) => {
    console.log("üì• UPDATE BODY:", req.body);
    next();
}, userController.updateUser);

// ‚ùå –ú‚Äô—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.delete('/:id', authMiddleware, authorizeRole(['admin']), userController.deleteUser);

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ is_active)
router.get('/:id', userController.getUserById);

module.exports = router;
