package com.example.diplom.ui.screens

import android.os.Build
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.diplom.data.TokenManager
import com.example.diplom.data.model.DepartmentItem
import com.example.diplom.data.network.RetrofitClient
import com.example.diplom.data.repository.AttendanceRepository
import com.example.diplom.data.repository.AuthRepository
import com.example.diplom.ui.theme.*
import com.example.diplom.viewmodel.AttendanceViewModel
import com.example.diplom.viewmodel.AuthViewModel
import com.example.diplom.viewmodel.AuthViewModelFactory
import kotlinx.coroutines.launch
import androidx.compose.foundation.clickable
import com.example.diplom.data.model.FacultySummaryRequest
import com.example.diplom.data.model.OfficerAbsenceRequest


@OptIn(ExperimentalMaterial3Api::class)
@Composable
@RequiresApi(Build.VERSION_CODES.O)

fun FacultyCommanderScreen(
    navController: NavController,
    tokenManager: TokenManager,
) {
    val coroutineScope = rememberCoroutineScope()
    val context = LocalContext.current

    val apiService = RetrofitClient.apiService
    val attendanceRepository = AttendanceRepository(apiService)
    val authRepository = AuthRepository(apiService, tokenManager)

    val attendanceViewModel: AttendanceViewModel = viewModel(
        factory = AttendanceViewModel.Factory(attendanceRepository)
    )
    val authViewModel: AuthViewModel = viewModel(
        factory = AuthViewModelFactory(authRepository, tokenManager)
    )

    val facultySummaries by attendanceViewModel.todayFacultySummaries.collectAsState()
    val missingCourses by attendanceViewModel.missingCourses.collectAsState()
    val departmentReports by attendanceViewModel.todayDepartmentReports.collectAsState()
    var missingDepartments by remember { mutableStateOf<List<DepartmentItem>>(emptyList()) }

    val predefinedReasons = listOf("–•–≤–æ—Ä—ñ", "–í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è", "–í—ñ–¥–ø—É—Å—Ç–∫–∞", "–ù–∞—Ä—è–¥", "–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–®–ø–∏—Ç–∞–ª—å")
    var selectedReason by remember { mutableStateOf(predefinedReasons.first()) }


    val filteredMissingDepartments = remember(missingDepartments, departmentReports) {
        missingDepartments.filter { missing ->
            departmentReports.none { report -> report.department_name == missing.name }
        }
    }

    LaunchedEffect(Unit) {
        val token = tokenManager.getAccessToken() ?: return@LaunchedEffect
        val facultyId = tokenManager.getFacultyId() ?: return@LaunchedEffect
        attendanceViewModel.fetchTodaySummariesByFaculty(facultyId, token)
        attendanceViewModel.fetchMissingCourses(facultyId, token)
        attendanceViewModel.fetchTodayDepartmentReports(facultyId, token)
        missingDepartments = authViewModel.getMissingDepartments(facultyId) ?: emptyList()
    }

    // üü° –î–û–î–ê–ô —Ü–µ —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ Composable
    var showDialog by remember { mutableStateOf(false) }
    var presentOfficers by remember { mutableStateOf("") }
    var presentOfficersError by remember { mutableStateOf<String?>(null) }


    var newReason by remember { mutableStateOf("") }
    var newCount by remember { mutableStateOf("") }
    var newNames by remember { mutableStateOf("") }


    Scaffold(
        containerColor = CyberBackground,
        topBar = {
            TopAppBar(
                title = { Text("–†–æ–∑—Ö–æ–¥–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–§–∞–∫—É–ª—å—Ç–µ—Ç)", color = CyberText) },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Black)
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .padding(padding)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()) // ‚úÖ —Å–∫—Ä–æ–ª
                .padding(16.dp)
        ) {
            Text(
                text = "–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥–∞–Ω—ñ —Ä–æ–∑—Ö–æ–¥–∏:",
                color = SoftAccent,
                fontSize = 18.sp,
                fontWeight = FontWeight.SemiBold,
                fontFamily = FontFamily.SansSerif,
                modifier = Modifier.padding(bottom = 12.dp)
            )

            facultySummaries.forEach { summary ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    colors = CardDefaults.cardColors(containerColor = CyberCard),
                    shape = RoundedCornerShape(12.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = "–ö—É—Ä—Å ${summary.course_number}",
                            color = CyberText,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.SemiBold
                        )
                        Spacer(modifier = Modifier.height(6.dp))

                        Text("üü¢ –ü—Ä–∏—Å—É—Ç–Ω—ñ: ${summary.present_count}", color = Color(0xFF00E676))

                        // üìù –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–∞–¥–ø–∏—Å –ø—Ä–æ –∑–º—ñ–Ω—É
                        if (summary.updated_at != null && summary.updated_at != summary.summary_date) {
                            val editedTime = summary.updated_at.substringAfter("T").substring(0, 5)
                            Text(
                                text = "üìù –ó–º—ñ–Ω–µ–Ω–æ –æ $editedTime",
                                color = Color.Yellow,
                                fontSize = 13.sp,
                                modifier = Modifier.padding(top = 4.dp)
                            )
                        }

                        Text(
                            text = if (summary.absent_count == 0) "‚úÖ –£—Å—ñ –Ω–∞ –º—ñ—Å—Ü—ñ"
                            else "üî¥ –í—ñ–¥—Å—É—Ç–Ω—ñ: ${summary.absent_count}",
                            color = if (summary.absent_count == 0) Color(0xFF00E676) else Color(0xFFFF5252)
                        )
                        Spacer(modifier = Modifier.height(10.dp))
                        Button(
                            onClick = {
                                navController.navigate("summary_detail/${summary.id}")
                            },
                            colors = ButtonDefaults.buttonColors(containerColor = SoftAccent),
                            shape = RoundedCornerShape(12.dp),
                            modifier = Modifier.align(Alignment.End)
                        ) {
                            Text("üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", color = CyberBackground)
                        }
                    }
                }
            }


            if (departmentReports.isNotEmpty()) {
                Spacer(modifier = Modifier.height(24.dp))
                Text(
                    text = "üìö –†–æ–∑—Ö–æ–¥–∏ –ø–æ –∫–∞—Ñ–µ–¥—Ä–∞—Ö:",
                    color = SoftAccent,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = FontFamily.SansSerif,
                    modifier = Modifier.padding(bottom = 12.dp)
                )

                departmentReports.forEach { report ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 8.dp),
                        colors = CardDefaults.cardColors(containerColor = CyberCard),
                        shape = RoundedCornerShape(12.dp),
                        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
                    ) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(
                                text = "–ö–∞—Ñ–µ–¥—Ä–∞: ${report.department_name}",
                                color = CyberText,
                                fontSize = 18.sp,
                                fontWeight = FontWeight.SemiBold
                            )

                            Spacer(modifier = Modifier.height(6.dp))

                            Text("üü¢ –ü—Ä–∏—Å—É—Ç–Ω—ñ: ${report.present_count}", color = Color(0xFF00E676))

                            val absentCount = report.total_count - report.present_count
                            Text(
                                text = if (absentCount == 0) "‚úÖ –£—Å—ñ –Ω–∞ –º—ñ—Å—Ü—ñ"
                                else "üî¥ –í—ñ–¥—Å—É—Ç–Ω—ñ: $absentCount",
                                color = if (absentCount == 0) Color(0xFF00E676) else Color(0xFFFF5252)
                            )

                            // üìù –ü–æ–∫–∞–∑ –º—ñ—Ç–∫–∏ –ø—Ä–æ –∑–º—ñ–Ω—É, —è–∫—â–æ –±—É–ª–∞
                            if (report.was_updated == true && !report.updated_at.isNullOrBlank()) {
                                val editedTime = try {
                                    java.time.Instant.parse(report.updated_at)
                                        .atZone(java.time.ZoneId.of("Europe/Kyiv"))
                                        .toLocalTime()
                                        .toString()
                                        .substring(0, 5)
                                } catch (e: Exception) {
                                    null
                                }

                                editedTime?.let {
                                    Spacer(modifier = Modifier.height(4.dp))
                                    Text(
                                        text = "üìù –ó–º—ñ–Ω–µ–Ω–æ –æ $it",
                                        color = Color.Yellow,
                                        fontSize = 13.sp,
                                        fontWeight = FontWeight.Medium
                                    )
                                }
                            }

                            Spacer(modifier = Modifier.height(10.dp))

                            Button(
                                onClick = {
                                    navController.navigate("departmentReportDetail/${report.report_id}")
                                },
                                colors = ButtonDefaults.buttonColors(containerColor = SoftAccent),
                                shape = RoundedCornerShape(12.dp),
                                modifier = Modifier.align(Alignment.Start)
                            ) {
                                Text("üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", color = CyberBackground)
                            }
                        }
                    }
                }



            }

            if (missingCourses.isNotEmpty()) {
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "‚ö†Ô∏è –ö—É—Ä—Å–∏, —è–∫—ñ –Ω–µ –ø–æ–¥–∞–ª–∏ —Ä–æ–∑—Ö—ñ–¥:",
                    color = Color.Yellow,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
                missingCourses.forEach {
                    Text(
                        text = "üî∏ –ö—É—Ä—Å ${it.course_number}",
                        color = Color.Yellow,
                        fontSize = 14.sp,
                        modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                    )
                }
            }

            if (filteredMissingDepartments.isNotEmpty()) {
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "‚ö†Ô∏è –ö–∞—Ñ–µ–¥—Ä–∏, —è–∫—ñ –Ω–µ –ø–æ–¥–∞–ª–∏ —Ä–æ–∑—Ö—ñ–¥:",
                    color = Color(0xFFFFA000),
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
                filteredMissingDepartments.forEach {
                    Text(
                        text = "üî∏ ${it.name}",
                        color = Color(0xFFFFC107),
                        fontSize = 14.sp,
                        modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = { showDialog = true }, // –≤—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1976D2)),
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(3.dp, shape = RoundedCornerShape(12.dp)),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text("üì§ –ü–æ–¥–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–∏–π —Ä–æ–∑—Ö—ñ–¥ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É", color = Color.White)
            }

            if (showDialog) {
                val reasonStates = remember(predefinedReasons) {
                    predefinedReasons.associateWith {
                        mutableStateOf("") to mutableStateOf("")
                    }
                }
                val reasonErrors = remember(predefinedReasons) {
                    predefinedReasons.associateWith { mutableStateOf<String?>(null) }
                }

                AlertDialog(
                    onDismissRequest = { showDialog = false },
                    confirmButton = {
                        Button(
                            onClick = {
                                coroutineScope.launch {
                                    val token = tokenManager.getAccessToken() ?: return@launch
                                    val facultyId = tokenManager.getFacultyId() ?: return@launch

                                    // üõë –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö –æ—Ñ—ñ—Ü–µ—Ä—ñ–≤
                                    if (presentOfficers.isBlank()) {
                                        presentOfficersError = "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
                                        return@launch
                                    }
                                    if (presentOfficers.toIntOrNull() == null || presentOfficers.toInt() < 0) {
                                        presentOfficersError = "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ ‚â• 0"
                                        return@launch
                                    }
                                    presentOfficersError = null // ‚úÖ –í—Å–µ –≥–∞—Ä–∞–∑–¥

                                    val presentOfficersSnapshot = presentOfficers.toInt()

                                    // ‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –≤—Å—ñ—Ö –ø—Ä–∏—á–∏–Ω
                                    reasonStates.forEach { (reason, pair) ->
                                        val count = pair.first.value
                                        val names = pair.second.value

                                        if (count.isNotBlank() && names.isBlank()) {
                                            Toast.makeText(context, "–£–∫–∞–∂—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–∞ –¥–ª—è –ø—Ä–∏—á–∏–Ω–∏: $reason", Toast.LENGTH_LONG).show()
                                            return@launch
                                        }

                                        if (names.isNotBlank() && count.isBlank()) {
                                            Toast.makeText(context, "–£–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –ø—Ä–∏—á–∏–Ω–∏: $reason", Toast.LENGTH_LONG).show()
                                            return@launch
                                        }
                                    }

                                    // üîÑ –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ OfficerAbsenceRequest
                                    val absences = reasonStates.mapNotNull { (reason, pair) ->
                                        val count = pair.first.value
                                        val names = pair.second.value
                                        if (count.isNotBlank() && names.isNotBlank()) {
                                            OfficerAbsenceRequest(
                                                reason = reason,
                                                names = names,
                                                count = count.toIntOrNull() ?: 0
                                            )
                                        } else null
                                    }

                                    val request = FacultySummaryRequest(
                                        presentOfficersCount = presentOfficersSnapshot,
                                        absencesOfficers = absences
                                    )

                                    attendanceViewModel.submitFacultySummary(
                                        facultyId = facultyId,
                                        token = token,
                                        request = request
                                    ) { success, message ->
                                        Toast.makeText(context, message, Toast.LENGTH_LONG).show()
                                        if (success) showDialog = false
                                    }
                                }
                            }

                            ,
                            colors = ButtonDefaults.buttonColors(containerColor = SoftAccent),
                            modifier = Modifier
                                .fillMaxWidth()
                                .shadow(2.dp, RoundedCornerShape(12.dp)),
                            shape = RoundedCornerShape(12.dp)
                        ) {
                            Text("–ü–æ–¥–∞—Ç–∏ —Ä–æ–∑—Ö—ñ–¥", color = CyberBackground)
                        }
                    }

                    ,
                    dismissButton = {
                        Button(
                            onClick = { showDialog = false },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFB22222)),
                            modifier = Modifier
                                .fillMaxWidth()
                                .shadow(2.dp, RoundedCornerShape(12.dp)),
                            shape = RoundedCornerShape(12.dp)
                        ) {
                            Text("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", color = Color.White)
                        }
                    },
                    title = {
                        Text(
                            "–ü–æ–¥–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ–≥–æ —Ä–æ–∑—Ö–æ–¥—É –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = CyberText
                        )
                    },
                    text = {
                        Column(
                            modifier = Modifier
                                .verticalScroll(rememberScrollState())
                                .fillMaxWidth()
                        ) {
                            Text("üìå –ü–æ–¥–∞–Ω—ñ –∫–∞—Ñ–µ–¥—Ä–∏:", color = SoftAccent, fontWeight = FontWeight.SemiBold)
                            departmentReports.forEach {
                                Text("‚úì ${it.department_name} (${it.present_count} –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö)", color = CyberText)
                            }

                            Spacer(modifier = Modifier.height(12.dp))

                            Text("üëÆ –û—Ñ—ñ—Ü–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É:", color = SoftAccent, fontWeight = FontWeight.SemiBold)

                            OutlinedTextField(
                                value = presentOfficers,
                                onValueChange = {
                                    val digitsOnly = it.filter { ch -> ch.isDigit() }.take(2)
                                    presentOfficers = digitsOnly
                                    presentOfficersError = null // –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
                                }
                                ,
                                label = { Text("–ü—Ä–∏—Å—É—Ç–Ω—ñ –æ—Ñ—ñ—Ü–µ—Ä–∏") },
                                modifier = Modifier.fillMaxWidth(),
                                isError = presentOfficersError != null,
                                supportingText = {
                                    presentOfficersError?.let { Text(it, color = Color.Red) }
                                },
                                colors = TextFieldDefaults.outlinedTextFieldColors(
                                    focusedBorderColor = SoftAccent,
                                    unfocusedBorderColor = CyberText,
                                    focusedTextColor = CyberText,
                                    unfocusedTextColor = CyberText,
                                    cursorColor = SoftAccent,
                                    errorBorderColor = Color.Red,
                                    errorTextColor = Color.Red
                                ),
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                            )


                            Spacer(modifier = Modifier.height(12.dp))

                            Text("–ü—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ:", color = SoftAccent, fontWeight = FontWeight.SemiBold)

                            predefinedReasons.forEach { reason ->
                                val (countState, namesState) = reasonStates[reason]!!
                                ExpandableReasonBlockForOfficers(
                                    title = reason,
                                    count = countState.value,
                                    onCountChange = { countState.value = it },
                                    names = namesState.value,
                                    onNamesChange = { namesState.value = it },
                                    errorText = reasonErrors[reason]?.value // ‚úÖ –û—Å—å —Ü–µ –¥–æ–¥–∞—î–º–æ
                                )
                            }

                        }
                    },
                    containerColor = CyberCard,
                    shape = RoundedCornerShape(16.dp),
                    tonalElevation = 6.dp
                )
            }





            Spacer(modifier = Modifier.height(24.dp))

            Button(
                onClick = { navController.navigate("summary_history") },
                colors = ButtonDefaults.buttonColors(containerColor = SoftAccent),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("üïì –Ü—Å—Ç–æ—Ä—ñ—è –∑–≤–µ–¥–µ–Ω–∏—Ö —Ä–æ–∑—Ö–æ–¥—ñ–≤", color = CyberText)
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    coroutineScope.launch {
                        tokenManager.clearTokens()
                        navController.navigate("login") {
                            popUpTo("login") { inclusive = true }
                        }
                    }
                },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFB22222)),
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(4.dp, shape = RoundedCornerShape(12.dp)),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text("–í–∏–π—Ç–∏", color = Color.White, fontWeight = FontWeight.Medium)
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ExpandableReasonBlockForOfficers(
    title: String,
    count: String,
    onCountChange: (String) -> Unit,
    names: String,
    onNamesChange: (String) -> Unit,
    errorText: String? // ‚úÖ –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–º–∏–ª–æ–∫
) {
    var expanded by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { expanded = !expanded }
                .padding(vertical = 4.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(title, fontWeight = FontWeight.Bold, color = SoftAccent)
            Icon(
                imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                contentDescription = null,
                tint = SoftAccent
            )
        }

        if (expanded) {
            OutlinedTextField(
                value = count,
                onValueChange = { newValue ->
                    val digitsOnly = newValue.filter { it.isDigit() }.take(2)
                    onCountChange(digitsOnly)
                },
                label = { Text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", color = CyberText) },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                singleLine = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                colors = attendanceTextFieldColors()
            )

            OutlinedTextField(
                value = names,
                onValueChange = { newValue ->
                    val sanitized = newValue.filter { it.isLetter() || it == ' ' || it == '-' || it == ',' }
                    onNamesChange(sanitized)
                },
                label = { Text("–ü—Ä—ñ–∑–≤–∏—â–∞", color = CyberText) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 4.dp),
                colors = attendanceTextFieldColors()
            )

            if (!errorText.isNullOrBlank()) {
                Text(
                    text = errorText,
                    color = Color.Red,
                    fontSize = 13.sp,
                    modifier = Modifier.padding(top = 2.dp)
                )
            }
        }
    }
}


