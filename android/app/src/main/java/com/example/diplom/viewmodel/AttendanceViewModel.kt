package com.example.diplom.viewmodel

import android.util.Log
import androidx.compose.runtime.mutableStateListOf
import java.time.LocalDate

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.diplom.data.model.AttendanceReportDetail
import com.example.diplom.data.model.AttendanceReportItem
import com.example.diplom.data.model.CourseSummaryReport
import com.example.diplom.data.model.DepartmentItem
import com.example.diplom.data.model.DepartmentReport
import com.example.diplom.data.model.FacultySummaryRequest
import com.example.diplom.data.model.LocationSummaryReport
import com.example.diplom.data.model.MissingCourse
import com.example.diplom.data.model.MissingGroup
import com.example.diplom.data.model.Report
import com.example.diplom.data.model.SummaryAbsence
import com.example.diplom.data.repository.AttendanceRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import com.example.diplom.data.model.TodayAttendanceReport
import com.example.diplom.data.model.TodaySummaryReport
import com.example.diplom.data.network.RetrofitClient.apiService
import okhttp3.ResponseBody



class AttendanceViewModel(private val repository: AttendanceRepository) : ViewModel() {

    // ‚¨ÜÔ∏è –î–æ–¥–∞–π —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –∫–ª–∞—Å—É (–ø—ñ—Å–ª—è —ñ–Ω—à–∏—Ö StateFlow)
    private val _submissionSuccess = MutableStateFlow(false)
    val submissionSuccess: StateFlow<Boolean> = _submissionSuccess


    // üîπ –ó–≤—ñ—Ç–∏ –ø–æ –∫—É—Ä—Å—É (–¥–ª—è nk)
    private val _reports = MutableStateFlow<List<Report>>(emptyList())
    val reports: StateFlow<List<Report>> = _reports

    private val _selectedReport = MutableStateFlow<AttendanceReportDetail?>(null)
    val selectedReport: StateFlow<AttendanceReportDetail?> = _selectedReport

    private val _locationSummaries = MutableStateFlow<List<LocationSummaryReport>>(emptyList())
    val locationSummaries: StateFlow<List<LocationSummaryReport>> = _locationSummaries

    // üîπ –ó–≤—ñ—Ç–∏ –ø–æ –≥—Ä—É–ø—ñ (–¥–ª—è kg ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è)
    private val _groupReports = MutableStateFlow<List<AttendanceReportItem>>(emptyList())
    val groupReports: StateFlow<List<AttendanceReportItem>> = _groupReports

    // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø–æ –∫—É—Ä—Å—É

    // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø–æ –≥—Ä—É–ø—ñ
    fun fetchReportsByGroup(groupId: Int, token: String) {
        viewModelScope.launch {
            val response = repository.getReportsByGroup(groupId, token)
            if (response.isSuccessful) {
                _groupReports.value = response.body() ?: emptyList()
            }
        }
    }

    private val _departmentReports = MutableStateFlow<List<AttendanceReportItem>>(emptyList())
    val departmentReports: StateFlow<List<AttendanceReportItem>> = _departmentReports

    fun fetchReportsByDepartment(departmentId: Int, token: String, onComplete: () -> Unit = {}) {
        viewModelScope.launch {
            try {
                val response = repository.getDepartmentReports(departmentId, token)
                if (response.isSuccessful) {
                    _departmentReports.value = response.body() ?: emptyList()
                }
            } catch (e: Exception) {
                Log.e("VM", "‚ùå Error fetching department reports", e)
            } finally {
                onComplete()
            }
        }
    }



    // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–≤—ñ—Ç—É
    fun fetchReportDetails(reportId: Int, token: String) {
        viewModelScope.launch {
            android.util.Log.d("DETAIL_DEBUG", "‚û°Ô∏è –ü–æ—á–∏–Ω–∞—é –∑–∞–ø–∏—Ç –Ω–∞ –∑–≤—ñ—Ç ID=$reportId")
            try {
                val response = repository.getReportDetails(reportId, token)
                if (response.isSuccessful) {
                    val body = response.body()
                    android.util.Log.d("DETAIL_DEBUG", "‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–≤—ñ—Ç: $body")
                    _selectedReport.value = body
                } else {
                    android.util.Log.e("DETAIL_DEBUG", "‚ùå –ù–µ—É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç: –∫–æ–¥ ${response.code()}")
                }
            } catch (e: Exception) {
                android.util.Log.e("DETAIL_DEBUG", "‚ùå –í–∏–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–µ—Ç–∞–ª–µ–π", e)
            }
        }
    }



    private val _todayReports = MutableStateFlow<List<TodayAttendanceReport>>(emptyList())
    val todayReports: StateFlow<List<TodayAttendanceReport>> = _todayReports

    fun fetchTodayReportsByCourse(courseId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getTodayReportsByCourse(courseId, token)
                if (response.isSuccessful) {
                    val result = response.body()
                    android.util.Log.d("TODAY_REPORTS", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${result?.size ?: 0} –∑–≤—ñ—Ç—ñ–≤")
                    _todayReports.value = result ?: emptyList()
                } else {
                    android.util.Log.e("TODAY_REPORTS", "‚ùå –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: ${response.code()}")
                }
            } catch (e: Exception) {
                android.util.Log.e("TODAY_REPORTS", "‚ùå –í–∏–∫–ª—é—á–µ–Ω–Ω—è: ${e.message}")
            }
        }
    }

    private val _todayDepartmentReports = MutableStateFlow<List<DepartmentReport>>(emptyList())
    val todayDepartmentReports: StateFlow<List<DepartmentReport>> = _todayDepartmentReports

    fun fetchTodayDepartmentReports(facultyId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = apiService.getTodayDepartmentReports(facultyId, "Bearer $token")
                if (response.isSuccessful) {
                    _todayDepartmentReports.value = response.body() ?: emptyList()
                    Log.d("TODAY_DEPT_REPORTS", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${_todayDepartmentReports.value.size} –∑–≤—ñ—Ç—ñ–≤ –ø–æ –∫–∞—Ñ–µ–¥—Ä–∞—Ö")
                } else {
                    Log.e("TODAY_DEPT_REPORTS", "‚ùå –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("TODAY_DEPT_REPORTS", "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }




    private val _missingGroups = MutableStateFlow<List<MissingGroup>>(emptyList())
    val missingGroups: StateFlow<List<MissingGroup>> = _missingGroups

    fun fetchMissingGroups(courseId: Int, token: String) {
        viewModelScope.launch {
            val response = repository.getMissingGroups(courseId, token)
            if (response.isSuccessful) {
                _missingGroups.value = response.body() ?: emptyList()
            }
        }
    }
    private val _summarySubmitResult = MutableStateFlow<String?>(null)
    val summarySubmitResult: StateFlow<String?> = _summarySubmitResult

    fun submitCourseSummary(courseId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.submitCourseSummary(courseId, token)
                if (response.isSuccessful) {
                    _summarySubmitResult.value = response.body()?.message

                    // üîÅ –û–ù–û–í–ò–¢–ò –°–ü–ò–°–û–ö –ó–í–ï–î–ï–ù–¨ ‚Äî –©–û–ë –ó'–Ø–í–ò–õ–û–°–Ø üìù
                    fetchCourseSummaries(courseId, token)

                } else {
                    _summarySubmitResult.value = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞–Ω–Ω—ñ –∑–≤–µ–¥–µ–Ω–æ–≥–æ —Ä–æ–∑—Ö–æ–¥—É"
                }
            } catch (e: Exception) {
                _summarySubmitResult.value = "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}"
            }
        }
    }


    fun clearSummaryMessage() {
        _summarySubmitResult.value = null
    }

    private val _courseSummaries = MutableStateFlow<List<CourseSummaryReport>>(emptyList())
    val courseSummaries: StateFlow<List<CourseSummaryReport>> = _courseSummaries


    fun fetchCourseSummaries(courseId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getCourseSummaries(courseId, token)
                if (response.isSuccessful) {
                    _courseSummaries.value = response.body() ?: emptyList()
                    Log.d("SUMMARY_HISTORY", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${_courseSummaries.value.size} –∑–∞–ø–∏—Å—ñ–≤")
                } else {
                    Log.e("SUMMARY_HISTORY", "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("SUMMARY_HISTORY", "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }



    private val _summaryAbsences = MutableStateFlow<List<SummaryAbsence>>(emptyList())
    val summaryAbsences: StateFlow<List<SummaryAbsence>> = _summaryAbsences


    fun fetchSummaryAbsences(summaryId: Int, token: String) {
        viewModelScope.launch {
            try {
                val absences = repository.fetchSummaryAbsences(summaryId, token)
                Log.d("VIEWMODEL", "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${absences.size} –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö")
                _summaryAbsences.value = absences
            } catch (e: Exception) {
                Log.e("VIEWMODEL", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö: ${e.message}")
            }
        }
    }

    fun fetchCourseSummary(summaryId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getCourseSummary(summaryId, token)
                if (response.isSuccessful) {
                    _selectedSummary.value = response.body()
                    Log.d("VIEWMODEL", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ summary: ${response.body()}")
                } else {
                    Log.e("VIEWMODEL", "‚ùå –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("VIEWMODEL", "‚ùå –í–∏–Ω—è—Ç–æ–∫ —É fetchCourseSummary: ${e.message}")
            }
        }
    }

    fun fetchLocationSummaryHistory(locationId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getLocationSummaryHistory(locationId, token)
                if (response.isSuccessful) {
                    _locationSummaries.value = response.body() ?: emptyList()
                    Log.d("VM_LOCATION_SUM", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${_locationSummaries.value.size} –∑–∞–ø–∏—Å—ñ–≤ –∑–≤–µ–¥–µ–Ω—å")
                } else {
                    Log.e("VM_LOCATION_SUM", "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("VM_LOCATION_SUM", "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }


    private val _selectedSummary = MutableStateFlow<CourseSummaryReport?>(null)
    val selectedSummary: StateFlow<CourseSummaryReport?> = _selectedSummary


    fun setSelectedSummary(summary: CourseSummaryReport) {
        _selectedSummary.value = summary
    }

    private val _todayFacultySummaries = MutableStateFlow<List<TodaySummaryReport>>(emptyList())
    val todayFacultySummaries: StateFlow<List<TodaySummaryReport>> = _todayFacultySummaries

    fun fetchTodaySummariesByFaculty(facultyId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getTodaySummariesByFaculty(facultyId, token)
                if (response.isSuccessful) {
                    _todayFacultySummaries.value = response.body() ?: emptyList()
                } else {
                    Log.e("VM", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω—å: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("VM", "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }



    private val _missingCourses = MutableStateFlow<List<MissingCourse>>(emptyList())
    val missingCourses: StateFlow<List<MissingCourse>> = _missingCourses

    fun fetchMissingCourses(facultyId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getMissingCourses(facultyId, token)
                if (response.isSuccessful) {
                    _missingCourses.value = response.body() ?: emptyList()
                } else {
                    android.util.Log.e("VM", "‚ùå –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ fetchMissingCourses: ${response.code()}")
                }
            } catch (e: Exception) {
                android.util.Log.e("VM", "‚ùå –í–∏–Ω—è—Ç–æ–∫ —É fetchMissingCourses: ${e.message}")
            }
        }
    }

    private val _facultySummaries = MutableStateFlow<List<CourseSummaryReport>>(emptyList())
    val facultySummaries: StateFlow<List<CourseSummaryReport>> = _facultySummaries

    fun fetchFacultySummaries(facultyId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getSummariesByFaculty(facultyId, token)
                if (response.isSuccessful) {
                    _facultySummaries.value = response.body() ?: emptyList()
                    Log.d("SUMMARY_HISTORY", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${_facultySummaries.value.size} –∑–≤–µ–¥–µ–Ω—å –ø–æ –ù–§")
                } else {
                    Log.e("SUMMARY_HISTORY", "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("SUMMARY_HISTORY", "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }


    fun submitFacultySummary(
        facultyId: Int,
        token: String,
        request: FacultySummaryRequest,
        onResult: (Boolean, String) -> Unit
    ) {
        viewModelScope.launch {
            try {
                val response = repository.submitFacultySummary(facultyId, token, request)
                if (response.isSuccessful) {
                    onResult(true, response.body()?.message ?: "‚úÖ –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ–¥–∞–Ω–æ")
                } else {
                    onResult(false, "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                onResult(false, "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }



    private val _missingDepartments = MutableStateFlow<List<DepartmentItem>>(emptyList())
    val missingDepartments: StateFlow<List<DepartmentItem>> = _missingDepartments


    fun fetchMissingDepartments(facultyId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getMissingDepartmentsByFaculty(facultyId, token)
                if (response.isSuccessful) {
                    _missingDepartments.value = response.body() ?: emptyList()
                    Log.d("VM", "‚úÖ –ö–∞—Ñ–µ–¥—Ä–∏ –±–µ–∑ —Ä–æ–∑—Ö–æ–¥—É: ${_missingDepartments.value.size}")
                } else {
                    Log.e("VM", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ fetchMissingDepartments: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("VM", "‚ùå –í–∏–Ω—è—Ç–æ–∫ —É fetchMissingDepartments: ${e.message}")
            }
        }
    }

    private val _submittedReports = MutableStateFlow<List<Report>>(emptyList())
    val submittedReports: StateFlow<List<Report>> = _submittedReports

    fun fetchSubmittedReportsByLocation(locationId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.getSubmittedReportsByLocation(locationId, token)
                if (response.isSuccessful) {
                    _submittedReports.value = response.body() ?: emptyList()
                    Log.d("AttendanceVM", "‚úÖ –ü–æ–¥–∞–Ω—ñ —Ä–æ–∑—Ö–æ–¥–∏ –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${_submittedReports.value.size}")
                } else {
                    Log.e("AttendanceVM", "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("AttendanceVM", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥–∞–Ω–∏—Ö —Ä–æ–∑—Ö–æ–¥—ñ–≤: ${e.message}")
            }
        }
    }


    fun submitLocationSummary(locationId: Int, token: String, onResult: (Boolean, String) -> Unit) {
        viewModelScope.launch {
            try {
                val response = repository.submitLocationSummary(token, locationId)
                if (response.isSuccessful) {
                    onResult(true, "‚úÖ –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ –ª–æ–∫–∞—Ü—ñ—ó –ø–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                } else {
                    onResult(false, "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                onResult(false, "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }


    // üîπ –ü–æ–¥–∞—Ç–∏ —Ä–æ–∑—Ö—ñ–¥ (submit)
    fun submitAttendanceReportFlexible(
        groupId: Int?,
        departmentId: Int?,
        totalCount: Int,
        presentCount: Int,
        absences: List<Map<String, String>>,
        token: String,
        onResult: (Boolean, String) -> Unit
    ) {
        viewModelScope.launch {
            try {
                val response = repository.submitAttendanceReportFlexible(
                    groupId = groupId,
                    departmentId = departmentId,
                    totalCount = totalCount,
                    presentCount = presentCount,
                    absences = absences,
                    token = token
                )

                if (response.isSuccessful) {
                    _submissionSuccess.value = true
                    onResult(true, "‚úÖ –†–æ–∑—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ")
                } else {
                    onResult(false, "‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.code()}")
                }
            } catch (e: Exception) {
                onResult(false, "‚ùå –í–∏–Ω—è—Ç–æ–∫: ${e.message}")
            }
        }
    }

    private val _wordExportResult = MutableStateFlow<ResponseBody?>(null)
    val wordExportResult: StateFlow<ResponseBody?> = _wordExportResult

    fun exportSummaryToWord(summaryId: Int, token: String) {
        viewModelScope.launch {
            try {
                val response = repository.exportCourseSummaryToWord(summaryId, token)
                if (response.isSuccessful) {
                    _wordExportResult.value = response.body()
                    Log.d("EXPORT_WORD", "‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ Word-—Ñ–∞–π–ª –¥–ª—è summaryId=$summaryId")
                } else {
                    Log.e("EXPORT_WORD", "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: ${response.code()}")
                    _wordExportResult.value = null
                }
            } catch (e: Exception) {
                Log.e("EXPORT_WORD", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–æ—Ä—Ç—É: ${e.message}")
                _wordExportResult.value = null
            }
        }
    }

    fun clearWordExportResult() {
        _wordExportResult.value = null
    }



    fun fetchMissingGroupsByLocation(locationId: Int, token: String, onResult: (List<MissingGroup>) -> Unit) {
        viewModelScope.launch {
            try {
                val response = repository.getMissingGroupsByLocation(locationId, token)
                if (response.isSuccessful) {
                    val groups = response.body()
                    if (groups != null) {
                        onResult(groups)
                    } else {
                        Log.e("AttendanceVM", "‚ùå –ì—Ä—É–ø–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ null")
                        onResult(emptyList())
                    }
                } else {
                    Log.e("AttendanceVM", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä—É–ø –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${response.code()}")
                    onResult(emptyList())
                }
            } catch (e: Exception) {
                Log.e("AttendanceVM", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä—É–ø –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${e.message}")
                onResult(emptyList())
            }
        }
    }






    // üîπ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è ViewModel
    class Factory(private val repository: AttendanceRepository) : ViewModelProvider.Factory {
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(AttendanceViewModel::class.java)) {
                @Suppress("UNCHECKED_CAST")
                return AttendanceViewModel(repository) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
}
