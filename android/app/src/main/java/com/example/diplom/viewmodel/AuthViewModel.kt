    package com.example.diplom.viewmodel

    import android.util.Log
    import androidx.lifecycle.ViewModel
    import androidx.lifecycle.viewModelScope
    import com.example.diplom.data.TokenManager
    import com.example.diplom.data.model.AuthResponse
    import com.example.diplom.data.model.DepartmentItem
    import com.example.diplom.data.model.FacultyItem
    import com.example.diplom.data.model.Location
    import com.example.diplom.data.model.MissingGroup
    import com.example.diplom.data.model.User
    import com.example.diplom.data.repository.AuthRepository
    import kotlinx.coroutines.launch

    class AuthViewModel(
        private val authRepository: AuthRepository,
        private val tokenManager: TokenManager
    ) : ViewModel() {

        fun login(login: String, password: String, onResult: (AuthResponse?) -> Unit) {
            viewModelScope.launch {
                try {
                    val response = authRepository.login(login, password)
                    onResult(response)
                } catch (e: Exception) {
                    onResult(null)
                }
            }
        }

        fun getToken(): String? {
            return tokenManager.getAccessToken()
        }

        suspend fun getUsersByRole(role: String): List<User>? {
            return try {
                authRepository.getUsersByRole(role)
            } catch (e: Exception) {
                null
            }
        }
        suspend fun getFaculties(): List<FacultyItem>? {
            return try {
                authRepository.getFaculties()
            } catch (e: Exception) {
                Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤: ${e.message}")
                null
            }
        }

        suspend fun getDepartments(): List<DepartmentItem>? {
            return try {
                authRepository.getDepartments()
            } catch (e: Exception) {
                null
            }
        }
        suspend fun getLocations(): List<Location>? {
            return try {
                authRepository.getLocations()
            } catch (e: Exception) {
                null
            }
        }


        suspend fun getMissingDepartments(facultyId: Int): List<DepartmentItem>? {
            return try {
                authRepository.getMissingDepartments(facultyId)
            } catch (e: Exception) {
                Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ñ–µ–¥—Ä: ${e.message}")
                null
            }
        }

        fun updateUser(
            id: Int,
            name: String,
            login: String,
            password: String,
            role: String,
            rank: String,
            isActive: Boolean,
            groupNumber: String? = null,
            parentId: Int? = null,
            courseId: String? = null, // ‚úÖ –¥–æ–¥–∞–Ω–æ
            onResult: (Boolean, String?) -> Unit
        ) {
            viewModelScope.launch {
                try {
                    val success = authRepository.updateUser(
                        id = id,
                        name = name,
                        login = login,
                        password = password,
                        role = role,
                        rank = rank,
                        isActive = isActive,
                        groupNumber = groupNumber,
                        parentId = parentId,
                        courseId = courseId // ‚úÖ –ø–µ—Ä–µ–¥–∞–Ω–æ
                    )
                    if (success) {
                        onResult(true, null)
                    } else {
                        onResult(false, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                    }
                } catch (e: Exception) {
                    Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${e.message}")
                    onResult(false, e.message)
                }
            }
        }

        fun getUserById(userId: Int, onResult: (User?) -> Unit) {
            viewModelScope.launch {
                try {
                    val user = authRepository.getUserById(userId)
                    onResult(user)
                } catch (e: Exception) {
                    onResult(null)
                }
            }
        }

        fun deleteUser(userId: Int, onResult: (Boolean) -> Unit) {
            viewModelScope.launch {
                try {
                    val success = authRepository.deleteUser(userId)
                    onResult(success)
                } catch (e: Exception) {
                    onResult(false)
                }
            }
        }

        fun addUser(
            name: String,
            login: String,
            password: String,
            role: String,
            rank: String,
            groupNumber: String? = null,
            parentId: Int? = null,
            courseId: String? = null,
            facultyId: Int? = null,
            departmentId: Int? = null, // üÜï
            locationId: Int? = null,   // üÜï
            onResult: (Boolean, String?, List<User>?) -> Unit
        ) {
            viewModelScope.launch {
                authRepository.addUser(
                    name = name,
                    login = login,
                    password = password,
                    role = role,
                    rank = rank,
                    groupNumber = groupNumber,
                    parentId = parentId,
                    courseId = courseId,
                    facultyId = facultyId,
                    departmentId = departmentId,
                    locationId = locationId
                ) { success, errorMessage, updatedUsers ->
                    if (success) {
                        Log.d("AuthViewModel", "‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                        onResult(true, null, updatedUsers)
                    } else {
                        Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: $errorMessage")
                        onResult(false, errorMessage, null)
                    }
                }
            }
        }

        suspend fun getMissingGroupsByLocation(locationId: Int): List<MissingGroup>? {
            return try {
                authRepository.getMissingGroupsByLocation(locationId)
            } catch (e: Exception) {
                Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä—É–ø –±–µ–∑ —Ä–æ–∑—Ö–æ–¥—É: ${e.message}")
                null
            }
        }




        // ‚úÖ –î–û–î–ê–ù–û: –ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è groupNumber –ø–æ groupId
        suspend fun getGroupNumberByGroupId(groupId: Int): String? {
            return try {
                authRepository.getGroupNumberByGroupId(groupId)
            } catch (e: Exception) {
                Log.e("AuthViewModel", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–∏: ${e.message}")
                null
            }
        }
    }
