const express = require('express');
const router = express.Router();
const pool = require('../config/database'); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL

// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–ª—ñ)
router.put('/users/:id/role', async (req, res) => {
    const { id } = req.params;
    const { role } = req.body;

    if (!role) {
        return res.status(400).json({ error: "–†–æ–ª—å —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ—é" });
    }

    try {
        const updatedUser = await pool.query(
            'UPDATE users SET role = $1 WHERE id = $2 RETURNING id, name, role, login, is_active',
            [role, id]
        );

        if (updatedUser.rowCount === 0) {
            return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log("‚úÖ –†–æ–ª—å –∑–º—ñ–Ω–µ–Ω–∞:", updatedUser.rows[0]);
        res.json(updatedUser.rows[0]);
    } catch (err) {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.put('/users/:id/status', async (req, res) => {
    const { id } = req.params;
    const { is_active } = req.body;

    if (typeof is_active !== "boolean") {
        return res.status(400).json({ error: "is_active –º–∞—î –±—É—Ç–∏ true –∞–±–æ false" });
    }

    try {
        const updatedUser = await pool.query(
            'UPDATE users SET is_active = $1 WHERE id = $2 RETURNING id, name, role, login, is_active',
            [is_active, id]
        );

        if (updatedUser.rowCount === 0) {
            return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ:", updatedUser.rows[0]);
        res.json(updatedUser.rows[0]);
    } catch (err) {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
