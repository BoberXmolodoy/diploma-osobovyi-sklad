package com.example.diplom.data.repository

import android.util.Log
import com.example.diplom.data.TokenManager
import com.example.diplom.data.model.*
import com.example.diplom.data.network.ApiService
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.HttpException

class AuthRepository(
    private val apiService: ApiService,
    private val tokenManager: TokenManager
) {
    suspend fun login(login: String, password: String): AuthResponse {
        val response = apiService.login(mapOf("login" to login, "password" to password))
        Log.d("AuthRepository", "üì© –û—Ç—Ä–∏–º–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏: accessToken=${response.accessToken}, refreshToken=${response.refreshToken}")

        tokenManager.saveTokens(response.accessToken, response.refreshToken)

        // ‚¨áÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ groupId —ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        val groupId = response.user.groupId

        // ‚¨áÔ∏è –ü—ñ–¥—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏ –ø–æ ID (—è–∫—â–æ —î)
        val groupNumber = if (groupId != null) {
            try {
                getGroupNumberByGroupId(groupId)
            } catch (e: Exception) {
                Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è groupNumber: ${e.message}")
                null
            }
        } else null

        // ‚¨áÔ∏è –ó–±–µ—Ä—ñ–≥–∞—î–º–æ groupId —ñ groupNumber —É TokenManager
        tokenManager.saveGroupInfo(groupId, groupNumber)

        return response
    }



    suspend fun refreshToken(): Boolean {
        val refreshToken = tokenManager.getRefreshToken() ?: return false
        return try {
            val response = apiService.refreshToken(mapOf("refreshToken" to refreshToken))
            val newAccessToken = response.accessToken
            val newRefreshToken = response.refreshToken ?: refreshToken
            tokenManager.saveTokens(newAccessToken, newRefreshToken)
            Log.d("AuthRepository", "‚úÖ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ")
            true
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: ${e.message}")
            withContext(Dispatchers.IO) { tokenManager.clearTokens() }
            false
        }
    }


    suspend fun getUsersByRole(role: String): List<User>? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        Log.d("AuthRepository", "üì© –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–ª—ñ: $role")

        return try {
            val users = apiService.getUsersByRole(role, authHeader)
            Log.d("AuthRepository", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.size} –¥–ª—è —Ä–æ–ª—ñ: $role")
            users
        } catch (e: HttpException) {
            if (e.code() == 401 && refreshToken()) {
                token = tokenManager.getAccessToken() ?: return null
                authHeader = "Bearer $token"
                return apiService.getUsersByRole(role, authHeader)
            }
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${e.message}")
            null
        }
    }

    suspend fun updateUser(
        id: Int,
        name: String,
        login: String,
        password: String,
        role: String,
        rank: String,
        isActive: Boolean,
        groupNumber: String? = null,
        parentId: Int? = null,
        courseId: String? = null // ‚úÖ –î–û–î–ê–ù–û
    ): Boolean {
        var token = tokenManager.getAccessToken() ?: return false
        var authHeader = "Bearer $token"

        val updateRequest = UpdateUserRequest(
            name = name,
            login = login,
            password = if (password.isNotEmpty()) password else null,
            role = role,
            rank = rank,
            isActive = isActive,
            groupNumber = if (role == "–∫–æ–º–∞–Ω–¥–∏—Ä_–≥—Ä—É–ø–∏" || role == "kg") groupNumber else null,
            parent_id = parentId,
            course_id = if (role == "–Ω–∞—á–∞–ª—å–Ω–∏–∫_–∫—É—Ä—Å—É" || role == "nk") courseId?.toIntOrNull() else null // ‚úÖ –ø–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ —è–∫—â–æ —Ü–µ nk
        )

        return try {
            apiService.updateUser(id, authHeader, updateRequest)
            Log.d("AuthRepository", "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            true
        } catch (e: HttpException) {
            if (e.code() == 401 && refreshToken()) {
                token = tokenManager.getAccessToken() ?: return false
                authHeader = "Bearer $token"
                apiService.updateUser(id, authHeader, updateRequest)
                return true
            }
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${e.message}")
            false
        }
    }



    @JvmOverloads
    suspend fun addUser(
        name: String,
        login: String,
        password: String,
        role: String,
        rank: String,
        groupNumber: String? = null,
        parentId: Int? = null,
        courseId: String? = null,
        facultyId: Int? = null,
        departmentId: Int? = null, // ‚úÖ –¥–æ–¥–∞–Ω–æ
        locationId: Int? = null,   // ‚úÖ –¥–æ–¥–∞–Ω–æ
        callback: (Boolean, String?, List<User>?) -> Unit
    ) {
        var token = tokenManager.getAccessToken() ?: return callback(false, "–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π", null)
        var authHeader = "Bearer $token"

        val request = CreateUserRequest(
            name = name,
            login = login,
            password = password,
            role = role,
            rank = rank,
            groupNumber = if (role == "–∫–æ–º–∞–Ω–¥–∏—Ä_–≥—Ä—É–ø–∏" || role == "kg") groupNumber else null,
            parent_id = parentId,
            course_id = courseId?.toIntOrNull(),
            faculty_id = facultyId,
            department_id = departmentId, // üÜï
            location_id = locationId      // üÜï
        )

        Log.d("AuthRepository", "üì© –í—ñ–¥–ø—Ä–∞–≤–∫–∞ CreateUserRequest: $request")

        try {
            val response = apiService.addUser(authHeader, request)
            Log.d("AuthRepository", "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: $response")

            val updatedUsers = getUsersByRole(role)
            callback(true, null, updatedUsers)

        } catch (e: HttpException) {
            if (e.code() == 401 && refreshToken()) {
                token = tokenManager.getAccessToken() ?: return callback(false, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω", null)
                authHeader = "Bearer $token"

                return try {
                    val retryUser = apiService.addUser(authHeader, request)
                    Log.d("AuthRepository", "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π (–ø–æ–≤—Ç–æ—Ä–Ω–æ): $retryUser")
                    val updatedUsers = getUsersByRole(role)
                    callback(true, null, updatedUsers)
                } catch (retryError: HttpException) {
                    Log.e("AuthRepository", "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${retryError.message}")
                    callback(false, retryError.message, null)
                }
            }

            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${e.message}")
            callback(false, e.message, null)
        }
    }

    suspend fun getUserById(userId: Int): User? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        return try {
            apiService.getUserById(userId, authHeader)
        } catch (e: HttpException) {
            if (e.code() == 401 && refreshToken()) {
                token = tokenManager.getAccessToken() ?: return null
                authHeader = "Bearer $token"
                return apiService.getUserById(userId, authHeader)
            }
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${e.message}")
            null
        }
    }

    suspend fun getGroupNumberByGroupId(groupId: Int): String? {
        val token = tokenManager.getAccessToken() ?: return null
        val authHeader = "Bearer $token"

        return try {
            val response = apiService.getGroupNumberById(groupId, authHeader)
            val number = response.body()?.get("number")?.toString()
            Log.d("AuthRepository", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ groupNumber: $number")
            number
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–∏: ${e.message}")
            null
        }
    }

    suspend fun getFaculties(): List<FacultyItem>? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        return try {
            val response = apiService.getFaculties(authHeader)
            if (response.isSuccessful) {
                Log.d("AuthRepository", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏: ${response.body()?.size}")
                response.body()
            } else {
                Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤: ${response.code()}")
                null
            }
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤: ${e.message}")
            null
        }
    }

    suspend fun deleteUser(userId: Int): Boolean {
        var token = tokenManager.getAccessToken() ?: return false
        var authHeader = "Bearer $token"

        return try {
            apiService.deleteUser(userId, authHeader)
            Log.d("AuthRepository", "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID $userId –≤–∏–¥–∞–ª–µ–Ω–æ")
            true
        } catch (e: HttpException) {
            if (e.code() == 401 && refreshToken()) {
                token = tokenManager.getAccessToken() ?: return false
                authHeader = "Bearer $token"
                apiService.deleteUser(userId, authHeader)
                return true
            }
            Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${e.message}")
            false
        }
    }

    suspend fun getDepartments(): List<DepartmentItem>? {
        val token = tokenManager.getAccessToken() ?: return null
        val authHeader = "Bearer $token"

        return try {
            val response = apiService.getDepartments(authHeader)
            if (response.isSuccessful) {
                Log.d("AuthRepository", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞—Ñ–µ–¥—Ä–∏: ${response.body()?.size}")
                response.body()
            } else {
                Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ñ–µ–¥—Ä: ${response.code()}")
                null
            }
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ñ–µ–¥—Ä: ${e.message}")
            null
        }
    }

    suspend fun getMissingDepartments(facultyId: Int): List<DepartmentItem>? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        return try {
            val response = apiService.getMissingDepartmentsByFaculty(facultyId, authHeader)
            if (response.isSuccessful) {
                Log.d("AuthRepository", "‚úÖ –ö–∞—Ñ–µ–¥—Ä–∏ –±–µ–∑ —Ä–æ–∑—Ö–æ–¥—É: ${response.body()?.size}")
                response.body()
            } else {
                Log.e("AuthRepository", "‚ùå –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ñ–µ–¥—Ä: ${response.code()}")
                null
            }
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ñ–µ–¥—Ä: ${e.message}")
            null
        }
    }

    suspend fun getMissingGroupsByLocation(locationId: Int): List<MissingGroup>? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        return try {
            val response = apiService.getMissingGroupsByLocation(locationId, authHeader)
            if (response.isSuccessful) {
                Log.d("AuthRepository", "‚úÖ –ì—Ä—É–ø–∏ –±–µ–∑ —Ä–æ–∑—Ö–æ–¥—É –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${response.body()?.size}")
                response.body()
            } else {
                Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä—É–ø –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${response.code()}")
                null
            }
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä—É–ø –ø–æ –ª–æ–∫–∞—Ü—ñ—ó: ${e.message}")
            null
        }
    }


    suspend fun getLocations(): List<Location>? {
        var token = tokenManager.getAccessToken() ?: return null
        var authHeader = "Bearer $token"

        return try {
            val response = apiService.getLocations(authHeader)
            if (response.isSuccessful) {
                Log.d("AuthRepository", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ª–æ–∫–∞—Ü—ñ—ó: ${response.body()?.size}")
                response.body()
            } else {
                Log.e("AuthRepository", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π: ${response.code()}")
                null
            }
        } catch (e: Exception) {
            Log.e("AuthRepository", "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–∫–∞—Ü—ñ–π: ${e.message}")
            null
        }
    }


}

