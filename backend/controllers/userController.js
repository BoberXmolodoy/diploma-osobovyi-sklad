const pool = require('../config/database');
const bcrypt = require('bcrypt');

const roleMap = {
  "–Ω–∞—á–∞–ª—å–Ω–∏–∫_–∫—É—Ä—Å—É": "nk",
  "–Ω–∞—á–∞–ª—å–Ω–∏–∫_—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É": "nf",
  "–∫–æ–º–∞–Ω–¥–∏—Ä_–≥—Ä—É–ø–∏": "kg",
   "–Ω–∞—á–∞–ª—å–Ω–∏–∫_–∫–∞—Ñ–µ–¥—Ä–∏": "nkf",   // üÜï –¥–æ–¥–∞–ª–∏ —Ü–µ
  "—á–µ—Ä–≥–æ–≤–∏–π_–ª–æ–∫–∞—Ü—ñ—ó": "cl",
};

/// üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.createUser = async (req, res) => {
  try {
    const {
      name,
      login,
      password,
      role,
      rank,
      groupNumber,
      parent_id,
      course_id,
      faculty_id,
      department_id,
      location_id // üÜï
    } = req.body;

    const errors = [];

    if (!name || name.length < 2 || name.length > 15)
      errors.push("–Ü–º‚Äô—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤");
    if (!login || login.length < 3 || login.length > 15)
      errors.push("–õ–æ–≥—ñ–Ω –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤");
    if (!password || password.length < 6 || password.length > 15)
      errors.push("–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 6 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤");
    if (!role || role.length < 2 || role.length > 15)
      errors.push("–†–æ–ª—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤");
    if (!rank || rank.length < 2 || rank.length > 15)
      errors.push("–ó–≤–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤");

    const dbRole = roleMap[role] || role;

    let groupId = null;
    let finalCourseId = course_id;
    let finalFacultyId = faculty_id || null;
    let finalLocationId = location_id || null;

   // –ö–ì ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥—Ä—É–ø—É
if (dbRole === 'kg') {
  if (!groupNumber) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏");
  if (!course_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å");

  if (errors.length === 0) {
    const groupRes = await pool.query(
      `SELECT id, commander_user_id FROM groups WHERE group_number = $1`,
      [groupNumber]
    );

    if (groupRes.rows.length > 0) {
      const existingGroup = groupRes.rows[0];

      if (existingGroup.commander_user_id) {
        // üõë –ö–æ–º–∞–Ω–¥–∏—Ä –≤–∂–µ —î ‚Äî –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ
        errors.push("–ì—Ä—É–ø–∞ –≤–∂–µ –º–∞—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞");
      } else {
        // ‚úÖ –ö–æ–º–∞–Ω–¥–∏—Ä–∞ –Ω–µ–º–∞ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—é –≥—Ä—É–ø—É
        groupId = existingGroup.id;
      }
    } else {
      // üîß –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
      const locationId = parseInt(groupNumber[0]);
      const newGroup = await pool.query(
        `INSERT INTO groups (group_number, course_id, location_id)
         VALUES ($1, $2, $3) RETURNING id`,
        [groupNumber, course_id, locationId]
      );
      groupId = newGroup.rows[0].id;
    }
  }
}


    // –ù–ö–§ ‚Äî –Ω–∞—á–∞–ª—å–Ω–∏–∫ –∫–∞—Ñ–µ–¥—Ä–∏
    if (dbRole === 'nkf') {
      if (!parent_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É (parent_id)");
      if (!department_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—É (department_id)");

      if (errors.length === 0) {
        const parentRes = await pool.query(
          `SELECT faculty_id FROM users WHERE id = $1`,
          [parent_id]
        );

        if (parentRes.rows.length === 0 || !parentRes.rows[0].faculty_id) {
          errors.push("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ faculty_id –∑ –ù–§");
        } else {
          finalFacultyId = parentRes.rows[0].faculty_id;
        }
      }
    }

    // –ù–ö ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∫—É—Ä—Å
    if (dbRole === 'nk') {
      if (!course_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É");
      if (!parent_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ (parent_id)");

      if (errors.length === 0) {
        const nfRes = await pool.query(
          `SELECT faculty_id FROM users WHERE id = $1`,
          [parent_id]
        );

        if (nfRes.rows.length === 0 || !nfRes.rows[0].faculty_id) {
          errors.push("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ faculty_id –∑ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É");
        } else {
          finalFacultyId = nfRes.rows[0].faculty_id;

          const courseRes = await pool.query(
            `SELECT id FROM courses WHERE number = $1`,
            [course_id]
          );

          if (courseRes.rows.length === 0) {
            const newCourse = await pool.query(
              `INSERT INTO courses (number, faculty_id) VALUES ($1, $2) RETURNING id`,
              [course_id, finalFacultyId]
            );
            finalCourseId = newCourse.rows[0].id;
          } else {
            finalCourseId = courseRes.rows[0].id;
          }
        }
      }
    }

    // CL ‚Äî —á–µ—Ä–≥–æ–≤–∏–π –ª–æ–∫–∞—Ü—ñ—ó
    if (dbRole === 'cl') {
      if (!location_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é (location_id)");
      finalFacultyId = null; // ‚ùó –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
    }

    if ((dbRole === 'nk' || dbRole === 'kg') && !parent_id)
      errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ (parent_id)");

    if (errors.length > 0)
      return res.status(400).json({ error: errors.join(', ') });

    const existing = await pool.query(
      `SELECT id FROM users WHERE login = $1`,
      [login]
    );
    if (existing.rows.length > 0) {
      return res.status(409).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î.' });
    }

    const passwordHash = await bcrypt.hash(password, 10);

    const insertResult = await pool.query(
      `INSERT INTO users 
        (name, login, password_hash, role, rank, is_active, created_at, group_id, parent_id, course_id, faculty_id, department_id, location_id)
       VALUES ($1, $2, $3, $4, $5, true, NOW(), $6, $7, $8, $9, $10, $11)
       RETURNING id`,
      [
        name,
        login,
        passwordHash,
        dbRole,
        rank,
        groupId,
        parent_id,
        finalCourseId,
        finalFacultyId,
        department_id,
        finalLocationId // üÜï
      ]
    );
const newUserId = insertResult.rows[0].id;

// üß∑ –Ø–∫—â–æ —Ü–µ –ö–ì ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –≥—Ä—É–ø—É: –æ—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ —ñ —Å—Ç–∞–≤–∏–º–æ –Ω–æ–≤–æ–≥–æ
if (dbRole === 'kg' && groupId) {
  // üîß –û—á–∏—Å—Ç–∏—Ç–∏ group_id —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ (—è–∫—â–æ —î)
  await pool.query(
    `UPDATE users SET group_id = NULL 
     WHERE id = (
       SELECT commander_user_id FROM groups WHERE id = $1
     ) AND id IS NOT NULL`,
    [groupId]
  );

  // üîß –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ —É –≥—Ä—É–ø—É
  await pool.query(
    `UPDATE groups SET commander_user_id = $1 WHERE id = $2`,
    [newUserId, groupId]
  );

  // üîß –ó–∞–ø–∏—Å–∞—Ç–∏ group_id –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫, —Ö–æ—á–∞ –≤–∂–µ –º–∞—î –±—É—Ç–∏)
  await pool.query(
    `UPDATE users SET group_id = $1 WHERE id = $2`,
    [groupId, newUserId]
  );
}


    let path = '';
    if (dbRole === 'nf') {
      path = `${newUserId}`;
    } else if (dbRole === 'nk' || dbRole === 'kg' || dbRole === 'nkf') {
      const parentPathRes = await pool.query(
        `SELECT path FROM users WHERE id = $1`,
        [parent_id]
      );
      if (parentPathRes.rows.length === 0) {
        return res.status(400).json({ error: '–ö–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }
      path = `${parentPathRes.rows[0].path}.${newUserId}`;
    }

    await pool.query(`UPDATE users SET path = $1 WHERE id = $2`, [path, newUserId]);

    res.status(201).json({
      message: '‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      user: {
        id: newUserId,
        name,
        login,
        role: dbRole,
        rank,
        groupId,
        course_id: finalCourseId,
        faculty_id: finalFacultyId,
        department_id,
        location_id: finalLocationId,
        path
      }
    });

  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
    res.status(500).json({ error: '‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};



// ‚úÖ updateUser –±–µ–∑ –∑–º—ñ–Ω ‚Äî –≤–∂–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î groupNumber ‚Üí group_id
exports.updateUser = async (req, res) => {
  const { id } = req.params;
  const {
    name,
    login,
    password,
    role,
    rank,
    is_active,
    groupNumber,
    parent_id,
    course_id // ‚úÖ –¥–æ–¥–∞–Ω–æ
  } = req.body;

  const errors = [];

  if (!name || name.length < 2 || name.length > 30)
    errors.push("–Ü–º‚Äô—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤");
  if (!login || login.length < 3 || login.length > 20)
    errors.push("–õ–æ–≥—ñ–Ω –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤");
  if (password && (password.length < 6 || password.length > 50))
    errors.push("–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 6 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤");
  if (!role || role.length < 2 || role.length > 20)
    errors.push("–†–æ–ª—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤");
  if (!rank || rank.length < 2 || rank.length > 50)
    errors.push("–ó–≤–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤");

  const dbRole = roleMap[role] || role;

  let groupId = null;
 // –ö–ì ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É
if (dbRole === 'kg') {
  if (!groupNumber) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏");
  if (!course_id) errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å");

  if (errors.length === 0) {
    const groupRes = await pool.query(
      `SELECT id FROM groups WHERE group_number = $1`,
      [groupNumber]
    );

    if (groupRes.rows.length > 0) {
      groupId = groupRes.rows[0].id;
    } else {
      const locationId = parseInt(groupNumber[0]);
      const newGroup = await pool.query(
        `INSERT INTO groups (group_number, course_id, location_id)
         VALUES ($1, $2, $3) RETURNING id`,
        [groupNumber, course_id, locationId]
      );
      groupId = newGroup.rows[0].id;
    }
  }
}


  if ((dbRole === 'nk' || dbRole === 'kg') && !parent_id) {
    errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ (parent_id)");
  }

  if (dbRole === 'nk' && !course_id) {
    errors.push("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∫—É—Ä—Å—É");
  }

  if (errors.length > 0) {
    return res.status(400).json({ error: errors.join(', ') });
  }

  try {
    const userCheck = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
    if (userCheck.rows.length === 0) {
      return res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const loginCheck = await pool.query('SELECT id FROM users WHERE login = $1 AND id != $2', [login, id]);
    if (loginCheck.rows.length > 0) {
      return res.status(409).json({ error: '–õ–æ–≥—ñ–Ω –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.' });
    }

    let passwordHash = userCheck.rows[0].password_hash;
    if (password) {
      passwordHash = await bcrypt.hash(password, 10);
    }

    await pool.query(
      `UPDATE users SET
        name = $1,
        login = $2,
        password_hash = $3,
        role = $4,
        rank = $5,
        is_active = $6,
        group_id = $7,
        parent_id = $8,
        course_id = $9
      WHERE id = $10`,
      [name, login, passwordHash, dbRole, rank, is_active, groupId, parent_id, course_id, id]
    );

    let path = '';
    if (dbRole === 'nf') {
      path = `${id}`;
    } else if (dbRole === 'nk' || dbRole === 'kg') {
      const parentPathRes = await pool.query('SELECT path FROM users WHERE id = $1', [parent_id]);
      if (parentPathRes.rows.length === 0) {
        return res.status(400).json({ error: '–ö–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }
      path = `${parentPathRes.rows[0].path}.${id}`;
    }

    await pool.query('UPDATE users SET path = $1 WHERE id = $2', [path, id]);

    res.json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


exports.deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    const subordinates = await pool.query('SELECT id FROM users WHERE parent_id = $1', [id]);
    if (subordinates.rows.length > 0) {
      return res.status(400).json({ error: '–ù–µ–º–æ–∂–ª–∏–≤–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏. –Ñ –ø—ñ–¥–ª–µ–≥–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ.' });
    }

    // üìç –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–º –≥—Ä—É–ø–∏ ‚Äî —Å–∫–∏–¥–∞—î–º–æ commander_user_id
    await pool.query(`
      UPDATE groups
      SET commander_user_id = NULL
      WHERE commander_user_id = $1
    `, [id]);

    // üü° Soft delete –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const result = await pool.query(
      'UPDATE users SET is_active = false WHERE id = $1 RETURNING id',
      [id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ (soft delete)' });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};



// üÜï –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–∏ –∑–∞ groupId
exports.getGroupNumberById = async (req, res) => {
  const { groupId } = req.params;

  try {
    const result = await pool.query(
      'SELECT group_number FROM groups WHERE id = $1',
      [groupId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ number: result.rows[0].group_number });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–∏:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


exports.getUserById = async (req, res) => {
  const userId = req.params.id;

  try {
      const result = await pool.query(`
          SELECT id, name, login, role, rank, is_active, group_id, parent_id, course_id
          FROM users
         WHERE id = $1 AND is_active = true
      `, [userId]);

      if (result.rows.length === 0) {
          return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      }

      res.json(result.rows[0]);
  } catch (err) {
      console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
